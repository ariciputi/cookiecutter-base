[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
license = "{{cookiecutter.license}}"

[tool.poetry.dependencies]
python = "^3.7"

[tool.poetry.dev-dependencies]
ipython = "^7.17"
pdbpp = "^0.10"
pytest = "^6.0"
pytest-cov = "^2.10"
pytest-randomly = "^3.4"
coverage = {extras = ["toml"], version = "^5.2"}
black = "^19.10b0"
toml = "^0.10"
isort = {extras = ["pyproject"], version = "^4.3"}
pylint = "^2.5"
{% if cookiecutter.use_pre_commit == 'y' %}
pre-commit = "^2.6"
{% endif %}
{% if cookiecutter.use_portray_docs == 'y' %}
pdocs = "^1.0"
mkdocs = "^1.1"
portray = "^1.4"
{% endif %}

[tool.pytest.ini_options]
minversion = "6.0"
junit_family = "legacy"
addopts = "--verbosity=1 --cov={{cookiecutter.project_slug}} --cov-report=term-missing --cov-report=xml --junit-xml=pytest-xunit.xml"

[tool.coverage.paths]
source = ["src",]

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.project_slug}}"]

[tool.coverage.report]
ignore_errors = true
fail_under = 90
show_missing = true

[tool.black]
line-length = 88
target-version = ["py37"]

[tool.isort]
line_length = 88
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
multi_line_output = 3
use_parentheses = true
known_first_party = "{{cookiecutter.project_slug}}"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

